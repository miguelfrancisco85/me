<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Miguel Francisco Nuñez Bueguera</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2025-02-15T21:31:28Z</updated>
  <author>
    <name>Miguel Francisco Nuñez Burguera</name>
    <email>miguelfrancisco85@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2025 Miguel Francisco Nuñez Burguera. All rights reserved.</rights>
  
  <entry>
  <title type="text">Long-Term Dividend Investing</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post7.html" />
  <id>http://localhost:3000/post7</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="long-term-dividend-investing">Long-Term Dividend Investing</h1>

<h2 id="what-is-long-term-dividend-investing">What is Long-Term Dividend Investing?</h2>

<p>Long-term dividend investing is a strategy focused on purchasing stocks of companies that regularly pay dividends, with the goal of generating passive income and capital appreciation over time. Investors prioritize companies with strong financial health, consistent dividend payouts, and a history of increasing dividends.</p>

<h2 id="key-benefits-of-dividend-investing">Key Benefits of Dividend Investing</h2>

<ul>
  <li><strong>Passive income:</strong> Regular dividend payments provide a steady income stream.</li>
  <li><strong>Compounding returns:</strong> Reinvesting dividends accelerates portfolio growth over time.</li>
  <li><strong>Lower volatility:</strong> Dividend-paying stocks tend to be less volatile than growth stocks.</li>
  <li><strong>Hedge against inflation:</strong> Dividend increases help maintain purchasing power.</li>
  <li><strong>Defensive investing:</strong> Dividend stocks often perform well during market downturns.</li>
  <li><strong>Tax advantages:</strong> In some jurisdictions, qualified dividends receive favorable tax treatment.</li>
</ul>

<h2 id="types-of-dividend-stocks">Types of Dividend Stocks</h2>

<ul>
  <li><strong>Dividend Aristocrats:</strong> Companies that have increased dividends for at least 25 consecutive years.</li>
  <li><strong>High-Yield Stocks:</strong> Companies that pay higher-than-average dividends, often found in sectors like utilities and REITs.</li>
  <li><strong>Dividend Growth Stocks:</strong> Firms with a consistent history of increasing dividends.</li>
  <li><strong>Blue-Chip Stocks:</strong> Large, well-established companies with stable dividend policies.</li>
  <li><strong>International Dividend Stocks:</strong> Non-U.S. companies that provide diversification and income opportunities.</li>
</ul>

<h2 id="how-to-start-investing-in-dividend-stocks">How to Start Investing in Dividend Stocks</h2>

<ol>
  <li><strong>Research and select companies:</strong> Look for financially strong businesses with sustainable dividend payout ratios.</li>
  <li><strong>Diversify your portfolio:</strong> Invest in multiple sectors to reduce risk.</li>
  <li><strong>Consider Dividend Reinvestment Plans (DRIPs):</strong> Automatically reinvest dividends to purchase more shares.</li>
  <li><strong>Monitor financial health:</strong> Regularly review company performance, payout ratios, and dividend growth.</li>
  <li><strong>Stay patient and disciplined:</strong> Long-term dividend investing requires consistency and a long-term mindset.</li>
  <li><strong>Assess valuation metrics:</strong> Consider dividend yield, payout ratio, price-to-earnings (P/E) ratio, and free cash flow before investing.</li>
</ol>

<h2 id="popular-dividend-stock-sectors">Popular Dividend Stock Sectors</h2>

<ul>
  <li><strong>Consumer Staples:</strong> (e.g., Procter &amp; Gamble, Coca-Cola) – Stable demand and reliable dividends.</li>
  <li><strong>Utilities:</strong> (e.g., NextEra Energy, Duke Energy) – High-yield and defensive sector.</li>
  <li><strong>Healthcare:</strong> (e.g., Johnson &amp; Johnson, Pfizer) – Resilient sector with steady growth.</li>
  <li><strong>Financials:</strong> (e.g., JPMorgan Chase, Wells Fargo) – Banks and insurance companies with attractive dividend policies.</li>
  <li><strong>Real Estate Investment Trusts (REITs):</strong> (e.g., Realty Income, Simon Property Group) – Provide consistent income with property-backed assets.</li>
  <li><strong>Energy:</strong> (e.g., ExxonMobil, Chevron) – Historically strong dividend payers in the oil and gas sector.</li>
</ul>

<h2 id="dividend-safety-metrics-to-consider">Dividend Safety Metrics to Consider</h2>

<ul>
  <li><strong>Payout Ratio:</strong> A lower payout ratio suggests sustainability (typically under 60% is ideal).</li>
  <li><strong>Earnings Stability:</strong> Look for companies with predictable earnings growth.</li>
  <li><strong>Dividend Coverage Ratio:</strong> Measures how well earnings can cover dividend payments.</li>
  <li><strong>Debt Levels:</strong> High debt can make dividend payments less secure.</li>
  <li><strong>Free Cash Flow (FCF):</strong> Companies with strong FCF are more likely to sustain and grow dividends.</li>
</ul>

<h2 id="tax-considerations">Tax Considerations</h2>

<p>Dividend income may be subject to taxation depending on your country of residence. Some dividends are classified as qualified, leading to favorable tax rates, while others are treated as ordinary income. It’s important to understand tax implications before investing.</p>

<h3 id="tax-efficient-dividend-investing">Tax-Efficient Dividend Investing</h3>

<ul>
  <li><strong>Utilize tax-advantaged accounts:</strong> Holding dividend stocks in IRAs or Roth IRAs can reduce tax liability.</li>
  <li><strong>Consider dividend withholding taxes:</strong> For international stocks, some countries impose withholding taxes on dividends.</li>
  <li><strong>Understand tax treaties:</strong> Some nations have agreements to lower withholding tax rates for foreign investors.</li>
</ul>

<h2 id="risks-of-dividend-investing">Risks of Dividend Investing</h2>

<ul>
  <li><strong>Dividend cuts:</strong> Companies may reduce or eliminate dividends in financial distress.</li>
  <li><strong>Sector concentration risk:</strong> Over-reliance on one sector can expose investors to industry downturns.</li>
  <li><strong>Market fluctuations:</strong> Stock prices may decline even if dividends remain stable.</li>
  <li><strong>Inflation impact:</strong> If dividend growth lags behind inflation, purchasing power may erode.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Dividend investing is a reliable strategy for generating passive income and building long-term wealth. By selecting solid companies, reinvesting dividends, and maintaining a diversified portfolio, investors can achieve financial stability and consistent returns over time. Conducting thorough research, monitoring financial health, and leveraging tax-advantaged strategies can enhance the effectiveness of this investment approach.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Traefik</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post6.html" />
  <id>http://localhost:3000/post6</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="traefik">Traefik</h1>

<h1 id="what-is-traefik">What is Traefik?</h1>

<p><strong>Traefik</strong> is a modern, cloud-native HTTP reverse proxy and load balancer designed to easily manage ingress traffic in Kubernetes and other containerized environments. It dynamically discovers services and automatically configures itself. This document covers its key features, installation steps, and additional best practices for optimizing performance in Kubernetes clusters.</p>

<h2 id="key-features-of-traefik">Key Features of Traefik</h2>

<ul>
  <li><strong>Dynamic Configuration:</strong> Automatically detects new services and updates its routing table.</li>
  <li><strong>Let’s Encrypt Integration:</strong> Supports automatic SSL certificate management.</li>
  <li><strong>Traffic Routing:</strong> Provides advanced load balancing and traffic routing.</li>
  <li><strong>Observability:</strong> Built-in metrics, logging, and tracing support.</li>
  <li><strong>Multi-Protocol Support:</strong> Handles HTTP, TCP, UDP, and WebSockets.</li>
  <li><strong>Native Kubernetes Integration:</strong> Works seamlessly with Kubernetes Ingress and Custom Resource Definitions (CRDs).</li>
  <li><strong>Middleware Support:</strong> Allows customization of request processing (e.g., authentication, rate limiting).</li>
</ul>

<h2 id="installing-traefik-on-kubernetes">Installing Traefik on Kubernetes</h2>

<h3 id="step-1-install-traefik-using-helm">Step 1: Install Traefik Using Helm</h3>

<p>Add the official Traefik Helm repository and install it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>helm repo add traefik https://traefik.github.io/charts
helm repo update
helm <span class="nb">install </span>traefik traefik/traefik
</code></pre></div></div>

<h3 id="step-2-verify-installation">Step 2: Verify Installation</h3>

<p>Check if the Traefik pods are running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-n</span> kube-system
</code></pre></div></div>

<h2 id="exposing-services-with-traefik">Exposing Services with Traefik</h2>

<h3 id="step-1-create-an-ingressroute">Step 1: Create an IngressRoute</h3>

<p>Define an <strong>IngressRoute</strong> resource for routing traffic to a service:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">traefik.containo.us/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">IngressRoute</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">entryPoints</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">web</span>
  <span class="na">routes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span> <span class="s">Host(`my-service.example.com`)</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Rule</span>
    <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<h3 id="step-2-verify-routing">Step 2: Verify Routing</h3>

<p>Ensure the routing is correctly configured:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get ingressroutes <span class="nt">-n</span> default
</code></pre></div></div>

<h2 id="advanced-configuration-options">Advanced Configuration Options</h2>

<h3 id="enabling-https-with-lets-encrypt">Enabling HTTPS with Let’s Encrypt</h3>

<p>To enable automatic HTTPS certificates, configure Traefik with <strong>Let’s Encrypt</strong> support:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">traefik.containo.us/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">IngressRoute</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">secure-service</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">entryPoints</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">websecure</span>
  <span class="na">tls</span><span class="pi">:</span>
    <span class="na">certResolver</span><span class="pi">:</span> <span class="s">myresolver</span>
  <span class="na">routes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span> <span class="s">Host(`secure.example.com`)</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Rule</span>
    <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">443</span>
</code></pre></div></div>

<p>Apply the configuration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> ingressroute-secure.yaml
</code></pre></div></div>

<h3 id="load-balancing-between-multiple-pods">Load Balancing Between Multiple Pods</h3>

<p>If your service runs multiple replicas, Traefik automatically distributes traffic between them. However, for more control, you can specify weighted load balancing:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">weight</span><span class="pi">:</span> <span class="m">2</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">backup-service</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">weight</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<h3 id="adding-middleware-for-authentication">Adding Middleware for Authentication</h3>

<p>You can add authentication middleware to restrict access:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">traefik.containo.us/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Middleware</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">auth-middleware</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">basicAuth</span><span class="pi">:</span>
    <span class="na">users</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">admin:$apr1$randomhashvalue"</span>  <span class="c1"># Use `htpasswd` to generate hashes</span>
</code></pre></div></div>

<p>Apply the middleware and attach it to an  <strong>IngressRoute</strong> :</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">routes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span> <span class="s">Host(`protected.example.com`)</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Rule</span>
    <span class="na">middlewares</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">auth-middleware</span>
    <span class="na">services</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
        <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<h2 id="troubleshooting-traefik-issues">Troubleshooting Traefik Issues</h2>

<h3 id="checking-logs">Checking Logs</h3>

<p>If Traefik is not behaving as expected, check the logs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-l</span> app.kubernetes.io/name<span class="o">=</span>traefik <span class="nt">-n</span> kube-system
</code></pre></div></div>

<h3 id="debugging-routing-issues">Debugging Routing Issues</h3>

<p>Ensure Traefik detects the service and ingress correctly:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe ingressroutes <span class="nt">-n</span> default
</code></pre></div></div>

<h3 id="verifying-certificate-issues">Verifying Certificate Issues</h3>

<p>Check if the certificates are properly generated:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get certificates <span class="nt">-n</span> default
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Traefik simplifies traffic management in Kubernetes environments with its dynamic service discovery, easy SSL integration, and advanced routing capabilities. By following these steps, you can deploy and configure Traefik to handle ingress traffic efficiently, enhance security with authentication middleware, and optimize traffic routing for high availability.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">MetalLB</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post5.html" />
  <id>http://localhost:3000/post5</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="metallb-load-balancer-for-bare-metal-kubernetes">MetalLB: Load Balancer for Bare Metal Kubernetes</h1>

<h2 id="what-is-metallb">What is MetalLB?</h2>

<p><strong>MetalLB</strong> is a load balancer solution for Kubernetes clusters running on bare metal. It provides network load balancing functionality where cloud provider solutions like AWS ELB or GCP LB are unavailable. This document covers its key features, installation steps, and additional configurations to optimize performance in Kubernetes clusters.</p>

<h2 id="key-features-of-metallb">Key Features of MetalLB</h2>

<ul>
  <li><strong>BGP and Layer 2 Modes:</strong> Supports both Border Gateway Protocol (BGP) and Layer 2 (ARP-based) load balancing.</li>
  <li><strong>Cloud-Native Integration:</strong> Works seamlessly with Kubernetes Services of type LoadBalancer.</li>
  <li><strong>Custom IP Address Pools:</strong> Allows administrators to define external IP ranges.</li>
  <li><strong>Lightweight and Simple:</strong> Easy to configure and deploy.</li>
  <li><strong>High Availability:</strong> Can be configured for redundancy in large-scale environments.</li>
  <li><strong>Supports IPv4 and IPv6:</strong> Provides flexibility for modern networking needs.</li>
</ul>

<h2 id="installing-metallb-on-kubernetes">Installing MetalLB on Kubernetes</h2>

<h3 id="step-1-install-metallb">Step 1: Install MetalLB</h3>

<p>Apply the official MetalLB manifests:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/metallb/metallb/main/config/manifests/metallb-native.yaml
</code></pre></div></div>

<h3 id="step-2-configure-metallb">Step 2: Configure MetalLB</h3>

<p>Create a ConfigMap defining the address pool:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">metallb-system</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">config</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">address-pools:</span>
    <span class="s">- name: default-pool</span>
      <span class="s">protocol: layer2</span>
      <span class="s">addresses:</span>
      <span class="s">- 192.168.1.100-192.168.1.200</span>
</code></pre></div></div>

<h3 id="step-3-verify-installation">Step 3: Verify Installation</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-n</span> metallb-system
</code></pre></div></div>

<h2 id="exposing-a-service-with-metallb">Exposing a Service with MetalLB</h2>

<h3 id="step-1-create-a-loadbalancer-service">Step 1: Create a LoadBalancer Service</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<h3 id="step-2-check-the-assigned-external-ip">Step 2: Check the Assigned External IP</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get svc my-service
</code></pre></div></div>

<p>The external IP should be assigned from the configured range.</p>

<h2 id="advanced-configuration-options">Advanced Configuration Options</h2>

<h3 id="enabling-bgp-mode">Enabling BGP Mode</h3>

<p>For a more robust networking setup, BGP mode can be configured to integrate with external routers:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">metallb.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">BGPPeer</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">peer1</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">metallb-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">myASN</span><span class="pi">:</span> <span class="m">64512</span>
  <span class="na">peerASN</span><span class="pi">:</span> <span class="m">64513</span>
  <span class="na">peerAddress</span><span class="pi">:</span> <span class="s">192.168.1.1</span>
</code></pre></div></div>

<p>Apply the configuration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> bgp-config.yaml
</code></pre></div></div>

<h3 id="using-metallb-with-ingress-controllers">Using MetalLB with Ingress Controllers</h3>

<p>MetalLB can work alongside Kubernetes ingress controllers (such as Nginx or Traefik) to expose applications with a public-facing IP:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">example-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">example.com</span>
    <span class="na">http</span><span class="pi">:</span>
      <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
        <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
        <span class="na">backend</span><span class="pi">:</span>
          <span class="na">service</span><span class="pi">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">my-service</span>
            <span class="na">port</span><span class="pi">:</span>
              <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<h2 id="troubleshooting-metallb-issues">Troubleshooting MetalLB Issues</h2>

<h3 id="checking-logs">Checking Logs</h3>

<p>If MetalLB is not working as expected, check the logs of the MetalLB controller:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-n</span> metallb-system deploy/controller
</code></pre></div></div>

<h3 id="debugging-ip-allocation">Debugging IP Allocation</h3>

<p>If services are not getting an external IP, verify the allocated IP pool:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe configmap config <span class="nt">-n</span> metallb-system
</code></pre></div></div>

<h3 id="resolving-port-conflicts">Resolving Port Conflicts</h3>

<p>Ensure that no other services are using the same ports by running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulnp</span> | <span class="nb">grep </span>80
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>MetalLB enables Kubernetes clusters running on bare metal to leverage external load balancing without cloud provider dependencies. By following these steps, you can set up MetalLB to handle Kubernetes LoadBalancer services efficiently, integrate it with ingress controllers, and configure BGP for advanced networking needs.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">k3s</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post4.html" />
  <id>http://localhost:3000/post4</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="k3s-a-lightweight-kubernetes-distribution">k3s: A Lightweight Kubernetes Distribution</h1>

<h2 id="what-is-k3s">What is k3s?</h2>

<p><strong>k3s</strong> is a lightweight Kubernetes distribution developed by Rancher Labs. It is designed for resource-constrained environments like IoT devices, home labs, or small-scale deployments. This document covers its key features and installation steps on both Raspberry Pi and multi-node clusters.</p>

<h2 id="key-features-of-k3s">Key Features of k3s</h2>

<ul>
  <li><strong>Lightweight:</strong> Smaller footprint and fewer system resources than standard Kubernetes.</li>
  <li><strong>Simplified Deployment:</strong> Runs as a single binary, reducing complexity.</li>
  <li><strong>Built-in SQLite or etcd:</strong> Simplifies setup by eliminating external dependencies.</li>
  <li><strong>IoT &amp; Edge Compatibility:</strong> Works well on Raspberry Pi and ARM architectures.</li>
  <li><strong>Helm Support:</strong> Allows easy application deployment.</li>
</ul>

<h2 id="installing-k3s-on-raspberry-pi">Installing k3s on Raspberry Pi</h2>

<h3 id="step-1-prepare-the-raspberry-pi">Step 1: Prepare the Raspberry Pi</h3>

<p>Ensure your system is up to date:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get upgrade <span class="nt">-y</span>
</code></pre></div></div>

<h3 id="step-2-install-k3s">Step 2: Install k3s</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sfL</span> https://get.k3s.io | sh -
</code></pre></div></div>

<p>This installs k3s as a service and sets up a single-node cluster.</p>

<h3 id="step-3-verify-installation">Step 3: Verify Installation</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubectl get nodes
</code></pre></div></div>

<p>Your Raspberry Pi should be listed as  <strong>Ready</strong> .</p>

<h3 id="step-4-deploy-a-test-application">Step 4: Deploy a Test Application</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create deployment nginx-test <span class="nt">--image</span><span class="o">=</span>nginx
kubectl expose deployment nginx-test <span class="nt">--type</span><span class="o">=</span>NodePort <span class="nt">--port</span><span class="o">=</span>80
</code></pre></div></div>

<p>Access nginx via your Raspberry Pi’s IP address.</p>

<h2 id="setting-up-a-multi-node-k3s-cluster">Setting Up a Multi-Node k3s Cluster</h2>

<h3 id="step-1-install-the-k3s-server-control-plane">Step 1: Install the k3s Server (Control Plane)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sfL</span> https://get.k3s.io | sh -
</code></pre></div></div>

<p>Retrieve the token for joining worker nodes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/rancher/k3s/server/node-token
</code></pre></div></div>

<h3 id="step-2-join-worker-nodes">Step 2: Join Worker Nodes</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sfL</span> https://get.k3s.io | <span class="nv">K3S_URL</span><span class="o">=</span><span class="s2">"https://YOUR_K3S_SERVER_IP:6443"</span> <span class="nv">K3S_TOKEN</span><span class="o">=</span><span class="s2">"YOUR_NODE_TOKEN"</span> sh -
</code></pre></div></div>

<p>Replace the placeholders with the actual server IP and token.</p>

<h3 id="step-3-verify-cluster-status">Step 3: Verify Cluster Status</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes
</code></pre></div></div>

<p>All nodes should appear with the status  <strong>Ready</strong> .</p>

<h3 id="step-4-deploy-applications">Step 4: Deploy Applications</h3>

<p>Use <code class="language-plaintext highlighter-rouge">kubectl</code> or <strong>Helm</strong> to deploy applications.</p>

<h2 id="example-deployment-manifest">Example Deployment Manifest</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hello-k3s</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hello-k3s</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hello-k3s</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hello-k3s</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<h3 id="apply-deployment">Apply Deployment</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> deployment.yaml
</code></pre></div></div>

<h3 id="expose-service">Expose Service</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl expose deployment hello-k3s <span class="nt">--type</span><span class="o">=</span>NodePort <span class="nt">--port</span><span class="o">=</span>80
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>k3s makes it easier to deploy Kubernetes in constrained environments while retaining compatibility with standard Kubernetes features. By following these steps, you can set up a k3s cluster for learning, development, or small-scale production use.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">ArgoCD</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post3.html" />
  <id>http://localhost:3000/post3</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="argocd">ArgoCD</h1>

<h2 id="what-is-argocd">What is ArgoCD?</h2>

<p><strong>ArgoCD</strong> is a declarative, GitOps-based continuous delivery tool for Kubernetes. It automates the deployment and synchronization of applications defined in Git repositories. This document covers its key features and installation steps on Kubernetes clusters.</p>

<h2 id="key-features-of-argocd">Key Features of ArgoCD</h2>

<ul>
  <li><strong>GitOps-based:</strong> Uses Git as the source of truth for application state.</li>
  <li><strong>Automated Synchronization:</strong> Ensures deployed applications match the desired state.</li>
  <li><strong>Multi-Cluster Management:</strong> Supports deploying applications across multiple clusters.</li>
  <li><strong>RBAC &amp; SSO:</strong> Provides role-based access control and integrates with Single Sign-On (SSO) providers.</li>
  <li><strong>Web UI &amp; CLI:</strong> Offers a user-friendly dashboard and command-line interface.</li>
</ul>

<h2 id="installing-argocd-on-kubernetes">Installing ArgoCD on Kubernetes</h2>

<h3 id="step-1-install-argocd">Step 1: Install ArgoCD</h3>

<p>Apply the official ArgoCD manifests:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-n</span> argocd <span class="nt">-f</span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
</code></pre></div></div>

<h3 id="step-2-expose-the-argocd-api-server">Step 2: Expose the ArgoCD API Server</h3>

<p>Use a LoadBalancer, Ingress, or port-forwarding:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl port-forward svc/argocd-server <span class="nt">-n</span> argocd 8080:443
</code></pre></div></div>

<h3 id="step-3-retrieve-admin-password">Step 3: Retrieve Admin Password</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get secret argocd-initial-admin-secret <span class="nt">-n</span> argocd <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.data.password}"</span> | <span class="nb">base64</span> <span class="nt">-d</span>
</code></pre></div></div>

<h3 id="step-4-login-to-argocd">Step 4: Login to ArgoCD</h3>

<p>Use the CLI to authenticate:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argocd login localhost:8080 <span class="nt">--username</span> admin <span class="nt">--password</span> &lt;PASSWORD&gt;
</code></pre></div></div>

<h2 id="deploying-an-application-with-argocd">Deploying an Application with ArgoCD</h2>

<h3 id="step-1-register-a-git-repository">Step 1: Register a Git Repository</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argocd repo add https://github.com/your/repository.git <span class="nt">--username</span> &lt;USER&gt; <span class="nt">--password</span> &lt;PASSWORD&gt;
</code></pre></div></div>

<h3 id="step-2-create-an-application">Step 2: Create an Application</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argocd app create my-app <span class="se">\</span>
    <span class="nt">--repo</span> https://github.com/your/repository.git <span class="se">\</span>
    <span class="nt">--path</span> k8s-manifests <span class="se">\</span>
    <span class="nt">--dest-server</span> https://kubernetes.default.svc <span class="se">\</span>
    <span class="nt">--dest-namespace</span> default
</code></pre></div></div>

<h3 id="step-3-sync-the-application">Step 3: Sync the Application</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argocd app <span class="nb">sync </span>my-app
</code></pre></div></div>

<h3 id="step-4-check-application-status">Step 4: Check Application Status</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>argocd app get my-app
</code></pre></div></div>

<h2 id="example-deployment-manifest">Example Deployment Manifest</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">argoproj.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Application</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">argocd</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">destination</span><span class="pi">:</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">server</span><span class="pi">:</span> <span class="s">https://kubernetes.default.svc</span>
  <span class="na">project</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">source</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">k8s-manifests</span>
    <span class="na">repoURL</span><span class="pi">:</span> <span class="s">https://github.com/your/repository.git</span>
    <span class="na">targetRevision</span><span class="pi">:</span> <span class="s">HEAD</span>
  <span class="na">syncPolicy</span><span class="pi">:</span>
    <span class="na">automated</span><span class="pi">:</span>
      <span class="na">prune</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">selfHeal</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>ArgoCD simplifies application delivery by integrating GitOps principles into Kubernetes environments. By following these steps, you can set up ArgoCD for automated and declarative continuous delivery.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">ESPHome</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post2.html" />
  <id>http://localhost:3000/post2</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="esp-and-nodemcu">ESP and NodeMCU</h1>

<h2 id="what-are-esp-and-nodemcu">What are ESP and NodeMCU?</h2>

<p>ESP (Espressif Systems Processors) are low-cost microcontrollers widely used for IoT (Internet of Things) applications. These powerful, Wi-Fi-enabled chips allow users to create smart devices, automation projects, and home monitoring solutions.</p>

<p>NodeMCU is a development board based on the ESP8266 chip. It simplifies programming and prototyping by providing a built-in USB-to-serial interface and additional GPIO pins for connecting sensors and actuators.</p>

<h2 id="popular-esp-models">Popular ESP Models</h2>

<ul>
  <li><strong>ESP8266:</strong> A compact and affordable Wi-Fi-enabled microcontroller, commonly used in small IoT projects.</li>
  <li><strong>ESP32:</strong> A more advanced version with dual-core processing, Bluetooth connectivity, and additional GPIO pins, ideal for complex automation systems.</li>
  <li><strong>NodeMCU:</strong> A development board that simplifies working with ESP8266 and provides a user-friendly environment for programming and connecting components.</li>
</ul>

<h2 id="uses-of-esp-in-home-automation">Uses of ESP in Home Automation</h2>

<ul>
  <li>Smart switches and relays for controlling lights and appliances remotely.</li>
  <li>Environmental monitoring using temperature, humidity, and air quality sensors.</li>
  <li>Security systems with motion sensors and cameras.</li>
  <li>Control of water consumption to monitor and manage usage efficiently.</li>
  <li>Control of electrical consumption for optimizing energy usage and reducing waste.</li>
  <li>Integration with Home Assistant to enhance home automation capabilities.</li>
</ul>

<h2 id="installing-firmware-on-esp">Installing Firmware on ESP</h2>

<p>To program an ESP device, you need to install the firmware using a programming tool like the Arduino IDE or ESPHome. Follow these steps:</p>

<ol>
  <li>Install Arduino IDE and add the ESP board manager.</li>
  <li>Connect your ESP device to your computer via USB.</li>
  <li>Open Arduino IDE and select the appropriate board (e.g., ESP8266 or ESP32).</li>
  <li>Install required libraries, such as ESPHome for Home Assistant integration.</li>
  <li>Write a basic script to test the connection (e.g., blinking an LED or connecting to Wi-Fi).</li>
  <li>Upload the script to the ESP and monitor its functionality.</li>
</ol>

<h2 id="setting-up-esp-for-home-automation">Setting up ESP for Home Automation</h2>

<p>To integrate ESP with Home Assistant:</p>

<ol>
  <li>Install ESPHome on your Home Assistant instance.</li>
  <li>Create a new ESPHome configuration file and define sensors, switches, or actuators.</li>
  <li>Flash the ESP device with the generated firmware.</li>
  <li>Connect the ESP to your home network.</li>
  <li>Add the ESP device to Home Assistant and configure automation rules.</li>
</ol>
 ]]></content>
</entry>


  <entry>
  <title type="text">Home Assistant</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/post1.html" />
  <id>http://localhost:3000/post1</id>
  <published>2025-02-13T00:00:00Z</published>
  <updated>2025-02-13T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1 id="home-assistant">Home Assistant</h1>

<p>Home Assistant is an open-source home automation platform that allows users to control their smart devices and create complex automations. It is written in Python and can be installed on various platforms, including Raspberry Pi and Kubernetes clusters using k3s. This document provides an overview of Home Assistant, its features, how to install it on a Raspberry Pi, and how to set it up in a Kubernetes cluster using k3s.</p>

<h2 id="what-is-home-assistant">What is Home Assistant?</h2>

<p>Home Assistant is a flexible and customizable platform that provides users with a central hub to control and automate their smart devices. It enables integration with a wide range of devices and services, including lights, sensors, thermostats, and cameras, supporting over 1400 different devices and services.</p>

<h2 id="home-assistant-features">Home Assistant Features</h2>

<ul>
  <li><strong>Integrations:</strong> Compatible with Google Home, Amazon Alexa, Philips Hue, Nest, and more.</li>
  <li><strong>Automations:</strong> Create complex automations using Home Assistant’s visual editor.</li>
  <li><strong>User Interface:</strong> Highly customizable with configurable dashboards.</li>
  <li><strong>Add-ons:</strong> Growing library of pre-configured software packages to extend functionality.</li>
</ul>

<h2 id="installing-home-assistant-on-raspberry-pi">Installing Home Assistant on Raspberry Pi</h2>

<p>To install Home Assistant on a Raspberry Pi, follow these steps:</p>

<ol>
  <li>Download the latest version of Raspberry Pi OS and flash it onto an SD card.</li>
  <li>Connect the Raspberry Pi to your network and power it on.</li>
  <li>Access it via SSH and run the following commands:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3 python3-pip
pip3 <span class="nb">install </span>homeassistant
</code></pre></div></div>

<ol>
  <li>Start Home Assistant with:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start home-assistant@homeassistant.service
</code></pre></div></div>

<ol>
  <li>Access the web interface at <code class="language-plaintext highlighter-rouge">http://&lt;your-raspberry-pi-ip&gt;:8123</code> in your browser.</li>
</ol>

<h2 id="installing-home-assistant-on-kubernetes-with-k3s">Installing Home Assistant on Kubernetes with k3s</h2>

<p>To install Home Assistant on a Kubernetes cluster using k3s:</p>

<ol>
  <li>Install k3s on your Kubernetes cluster.</li>
  <li>Create a new namespace:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create namespace home-assistant
</code></pre></div></div>

<ol>
  <li>Define the deployment:</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">home-assistant</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">home-assistant</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">home-assistant</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">home-assistant</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">home-assistant</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">homeassistant/home-assistant:latest</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8123</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/config</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">home-assistant-config</span>
</code></pre></div></div>

<ol>
  <li>Create a persistent volume claim:</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">home-assistant-config</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">home-assistant</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">1Gi</span>
</code></pre></div></div>

<ol>
  <li>Apply the configurations:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> deployment.yaml
kubectl apply <span class="nt">-f</span> pvc.yaml
</code></pre></div></div>

<ol>
  <li>Access the web interface at <code class="language-plaintext highlighter-rouge">http://&lt;your-kubernetes-node-ip&gt;:&lt;node-port&gt;</code>.</li>
</ol>

<p>Optionally, you can expose Home Assistant to the internet using a Kubernetes ingress controller or a load balancer.</p>
 ]]></content>
</entry>



</feed>
